name: Deploy to AWS ECR and Update Configurations

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  workflow_dispatch:  # Allow manual triggers

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 339712904244.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY: rts-site-front
  DOCKER_BUILDKIT: 1

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate metadata
        id: meta
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +'%Y-%m-%d-%H-%M')
          IMAGE_TAG="${COMMIT_HASH}-${TIMESTAMP}"
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Set up Docker layer caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.image-tag }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          labels: |
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Update values.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.meta.outputs.image-tag }}
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Update the values.yaml file
          if [ -f "rts-site-front/values.yaml" ]; then
            echo "Updating values.yaml with new image tag: ${IMAGE_TAG}"
            sed -i "s/tag: .*/tag: \"${IMAGE_TAG}\"/" rts-site-front/values.yaml
            
            # Check if there are changes to commit
            if git diff --quiet; then
              echo "No changes to values.yaml detected"
            else
              git add rts-site-front/values.yaml
              git commit -m "chore: update image tag to ${IMAGE_TAG}"
              git push
              echo "Successfully updated values.yaml and pushed changes"
            fi
          else
            echo "Error: values.yaml not found at expected path"
            exit 1
          fi

      # Cleanup cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Verify deployment
        run: |
          echo "Verifying image availability in ECR..."
          aws ecr describe-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-ids imageTag=${{ steps.meta.outputs.image-tag }} \
            --region ${{ env.AWS_REGION }} || exit 1
          echo "Image verification successful"